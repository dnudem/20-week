@charset "UTF-8";
/* line 1, C:/Users/Intestine/Desktop/20week/app/public/_sass/app.scss */
*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

/* line 5, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline; }

/* line 22, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
html {
  line-height: 1; }

/* line 24, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
ol, ul {
  list-style: none; }

/* line 26, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/* line 28, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle; }

/* line 30, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
q, blockquote {
  quotes: none; }
  /* line 103, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
  q:before, q:after, blockquote:before, blockquote:after {
    content: "";
    content: none; }

/* line 32, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
a img {
  border: none; }

/* line 116, C:/Users/Intestine/Desktop/20week/app/public/_sass/lib/compass/reset/_utilities.scss */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/* line 7, C:/Users/Intestine/Desktop/20week/app/public/_sass/_typography.scss */
.modal-panel-blk .modal-title, .wrapper, .btn-add,
.btn-download {
  font-family: "Microsoft JhengHei"; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@font-face {
  font-family: "iconfont";
  src: url("../fonts/iconfont.eot");
  src: url("../fonts/iconfont.eot?#iefix") format("eot"), url("../fonts/iconfont.woff") format("woff"), url("../fonts/iconfont.ttf") format("truetype"), url("../fonts/iconfont.svg#iconfont") format("svg"); }

/* line 10, C:/Users/Intestine/Desktop/20week/app/public/_sass/_iconfont.scss */
.work-item-list .drag:before, .btn-add:before,
.btn-download:before, .btn-delete:before {
  font-family: "iconfont";
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  text-decoration: none;
  text-transform: none; }

/*↓↓↓舊編譯器(ruby sass)請解開這組↓↓↓*/
/* $sprites: sprite-map('sprite/_global.png');
$spriteUrl : sprite-url($sprites);
@mixin sp($name) {
	background-image: $spriteUrl;
	background-position: sprite-position($sprites, $name);
	background-repeat: no-repeat;
	width: image-width(sprite-file($sprites, $name));
    height: image-height(sprite-file($sprites, $name));
} */
/*↑↑↑舊編譯器(ruby sass)請解開這組*/
/*↓↓↓新編譯器(libsass)請解開這組↓↓↓*/
/*↑↑↑新編譯器(libsass)請解開這組↑↑↑*/
/* line 95, C:/Users/Intestine/Desktop/20week/app/public/_sass/_mixin.scss */
.work-add-panel:after, .work-item-header:after, .week-mark-list:after, .button-blk:after {
  content: "";
  display: table;
  clear: both; }

/* line 2, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
.modal-panel-blk {
  visibility: hidden;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 30000;
  width: 100%;
  height: 100%;
  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  align-items: center;
  -webkit-transition: visibility 0s false;
  -webkit-transition-delay: 0.4s;
  -moz-transition: visibility 0s false 0.4s;
  -o-transition: visibility 0s false 0.4s;
  transition: visibility 0s 0.4s; }
  /* line 15, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .modal-panel-blk .modal-title {
    height: 44px;
    padding: 10px 15px;
    background: #30aadc;
    color: #fff;
    text-align: left;
    font-size: 1.25em;
    line-height: 1.2em; }
  /* line 24, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .modal-panel-blk .btn-close {
    position: relative;
    z-index: 10;
    margin-right: 10px;
    margin-top: -37px;
    float: right; }
    /* line 30, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
    .modal-panel-blk .btn-close:before, .modal-panel-blk .btn-close:after {
      background: #fff; }
  /* line 35, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .modal-panel-blk .modal-content {
    overflow: hidden;
    display: block;
    background: #fff;
    box-shadow: 0 0 10px #fff;
    min-width: 480px;
    border-radius: 5px;
    -webkit-transform: translateY(100vh);
    -moz-transform: translateY(100vh);
    -ms-transform: translateY(100vh);
    -o-transform: translateY(100vh);
    transform: translateY(100vh);
    -webkit-transition: -webkit-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1);
    -moz-transition: -moz-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1) false;
    -o-transition: -o-transform 0.3s cubic-bezier(0.7, 0, 0.3, 1) false;
    transition: transform 0.3s cubic-bezier(0.7, 0, 0.3, 1); }
  /* line 45, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .modal-panel-blk .overlay {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    width: 100%;
    height: 100%;
    cursor: pointer;
    background: rgba(0, 0, 0, 0.5);
    opacity: 0;
    pointer-events: none;
    -webkit-transition: opacity 0.3s 0.1s;
    -webkit-transition-delay: cubic-bezier(0.7, 0, 0.3, 1);
    -moz-transition: opacity 0.3s 0.1s cubic-bezier(0.7, 0, 0.3, 1);
    -o-transition: opacity 0.3s 0.1s cubic-bezier(0.7, 0, 0.3, 1);
    transition: opacity 0.3s 0.1s cubic-bezier(0.7, 0, 0.3, 1); }
  /* line 59, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .modal-panel-blk.show,
  .hide-switch:checked + .modal-panel-blk {
    visibility: visible;
    -webkit-transition: visibility 0s false;
    -moz-transition: visibility 0s false false;
    -o-transition: visibility 0s false false;
    transition: visibility 0s; }
    /* line 63, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
    .modal-panel-blk.show .overlay,
    .hide-switch:checked + .modal-panel-blk .overlay {
      opacity: 1;
      pointer-events: auto;
      -webkit-transition: opacity 0.3s cubic-bezier(0.7, 0, 0.3, 1);
      -moz-transition: opacity 0.3s cubic-bezier(0.7, 0, 0.3, 1) false;
      -o-transition: opacity 0.3s cubic-bezier(0.7, 0, 0.3, 1) false;
      transition: opacity 0.3s cubic-bezier(0.7, 0, 0.3, 1); }
    /* line 68, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
    .modal-panel-blk.show .modal-content,
    .hide-switch:checked + .modal-panel-blk .modal-content {
      -webkit-transform: translateY(0);
      -moz-transform: translateY(0);
      -ms-transform: translateY(0);
      -o-transform: translateY(0);
      transform: translateY(0);
      -webkit-transition: -webkit-transform 0.2s 0.1s;
      -webkit-transition-delay: cubic-bezier(0.7, 0, 0.3, 1);
      -moz-transition: -moz-transform 0.2s 0.1s cubic-bezier(0.7, 0, 0.3, 1);
      -o-transition: -o-transform 0.2s 0.1s cubic-bezier(0.7, 0, 0.3, 1);
      transition: transform 0.2s 0.1s cubic-bezier(0.7, 0, 0.3, 1); }

/* line 74, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
.btn-close {
  position: relative;
  width: 30px;
  height: 30px;
  background: none;
  border: none;
  text-indent: -119988px;
  overflow: hidden;
  text-align: left;
  -webkit-transition: all 0.3s false;
  -moz-transition: all 0.3s false false;
  -o-transition: all 0.3s false false;
  transition: all 0.3s; }
  /* line 82, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .btn-close:before, .btn-close:after {
    content: "";
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    background: #000;
    -webkit-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    -o-transform: rotate(45deg);
    transform: rotate(45deg);
    -webkit-transition: all 0.3s false;
    -moz-transition: all 0.3s false false;
    -o-transition: all 0.3s false false;
    transition: all 0.3s; }
  /* line 93, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .btn-close:before {
    width: 90%;
    height: 2px;
    margin-top: 0;
    margin-left: -45%; }
  /* line 99, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .btn-close:after {
    height: 90%;
    width: 2px;
    margin-left: -1px;
    margin-top: -42.5%; }
  /* line 105, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .btn-close:hover {
    background: #fff; }
    /* line 107, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
    .btn-close:hover:before, .btn-close:hover:after {
      background: #000; }

/* line 113, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
.work-add-panel {
  padding: 30px;
  padding-bottom: 0;
  width: 600px;
  margin: 0 auto; }
  /* line 119, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .work-add-panel .row {
    position: relative;
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    margin-bottom: 20px; }
    /* line 125, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
    .work-add-panel .row:last-child {
      margin-bottom: 30px;
      padding-top: 10px;
      clear: both;
      text-align: center; }
  /* line 132, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .work-add-panel .half {
    width: 48%;
    float: left; }
    /* line 135, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
    .work-add-panel .half.right {
      float: right; }
  /* line 139, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .work-add-panel .label {
    display: block;
    width: 100%;
    margin-bottom: 10px;
    margin-right: 10px; }
  /* line 145, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .work-add-panel .ipt,
  .work-add-panel .week-ipt {
    height: 30px;
    padding: 0 5px; }
  /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .work-add-panel .ipt {
    width: 100%; }
  /* line 153, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .work-add-panel .week-ipt {
    display: none;
    width: 105px; }
  /* line 157, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .work-add-panel .btn-add {
    margin: 0 auto;
    font-size: 1.25em;
    line-height: 1.8em; }

/* line 162, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
.week-input-list {
  width: 100%;
  background: #fff;
  border-top: 1px skyblue solid;
  border-left: 1px skyblue solid; }
  /* line 167, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
  .week-input-list .item {
    width: 25%;
    height: 35px;
    line-height: 35px;
    text-align: center;
    float: left;
    border-right: 1px skyblue solid;
    border-bottom: 1px skyblue solid;
    cursor: pointer; }
    /* line 176, C:/Users/Intestine/Desktop/20week/app/public/_sass/_modal-panel-blk.scss */
    .week-input-list .item:hover, .week-input-list .item.act {
      background: skyblue;
      color: #fff; }

/* line 2, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.wrapper {
  overflow: hidden;
  padding: 10px;
  margin: 0 auto;
  min-width: 1360px;
  max-width: 1360px; }

/* line 10, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.work-item-wrapper {
  overflow: hidden; }

/* line 13, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.main-title,
.week-mark-list {
  height: 40px;
  font-size: 1.25em;
  line-height: 2em; }

/* line 18, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.work-item-header {
  border: 1px solid skyblue; }

/* line 22, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.main-title {
  float: left;
  width: calc(100% - 960px);
  text-align: center;
  font-weight: bold;
  overflow: hidden; }

/* line 30, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.week-mark-list {
  float: left;
  width: 960px; }
  /* line 34, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .week-mark-list .item {
    position: relative;
    float: left;
    width: 4.16667%;
    text-align: center;
    border-left: 1px skyblue solid; }
    /* line 40, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .week-mark-list .item:after {
      content: "";
      width: calc(100% + 2px);
      height: 100vh;
      display: block;
      position: absolute;
      top: 41px;
      left: -1px;
      z-index: 100;
      border-left: 1px solid #888;
      opacity: .1; }
    /* line 52, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .week-mark-list .item:last-child:after {
      border-right: 1px solid #888; }
    /* line 55, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .week-mark-list .item:hover, .week-mark-list .item:hover:after {
      color: #fff;
      background: skyblue; }

/* line 63, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.work-item-list {
  clear: both;
  font-size: 1.25em;
  line-height: 2em; }
  /* line 66, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .work-item-list .item {
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    border-bottom: 1px skyblue solid; }
  /* line 72, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .work-item-list .ui-sortable-helper {
    border: 1px skyblue solid;
    background: rgba(135, 206, 235, 0.5); }
    /* line 75, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .ui-sortable-helper .btn-delete {
      display: none; }
  /* line 79, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .work-item-list .title {
    position: relative;
    overflow: hidden;
    float: left;
    display: block;
    width: calc(100% - 960px);
    padding-top: 5px;
    padding-left: 20px;
    padding-right: 30px;
    padding-bottom: 5px;
    cursor: move;
    -webkit-transition: all 0.3s false;
    -moz-transition: all 0.3s false false;
    -o-transition: all 0.3s false false;
    transition: all 0.3s;
    font-size: 0.9em;
    line-height: 1.46667em; }
    /* line 93, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .title:hover .btn-delete {
      opacity: 1;
      -webkit-transform: translateX(0);
      -moz-transform: translateX(0);
      -ms-transform: translateX(0);
      -o-transform: translateX(0);
      transform: translateX(0); }
    /* line 97, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .title:hover .drag {
      opacity: 1;
      -webkit-transform: scale(1, 1);
      -moz-transform: scale(1, 1);
      -ms-transform: scale(1, 1);
      -o-transform: scale(1, 1);
      transform: scale(1, 1); }
  /* line 103, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .work-item-list .drag {
    position: absolute;
    top: 0;
    left: 0;
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    width: 20px;
    height: 100%;
    margin-left: 0px;
    opacity: 0;
    -webkit-transform: scale(0, 0);
    -moz-transform: scale(0, 0);
    -ms-transform: scale(0, 0);
    -o-transform: scale(0, 0);
    transform: scale(0, 0);
    -webkit-transition: all 0.3s false;
    -moz-transition: all 0.3s false false;
    -o-transition: all 0.3s false false;
    transition: all 0.3s; }
    /* line 117, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .drag:before {
      content: "";
      display: block;
      width: 20px;
      height: 25px;
      font-size: 16px;
      line-height: 25px;
      color: #888;
      vertical-align: middle; }
  /* line 129, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .work-item-list .duration {
    float: left;
    width: calc(100% - calc(100% - 960px));
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    font-size: 0; }
    /* line 136, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration:before {
      content: "";
      display: block;
      float: left;
      width: 100%;
      height: 12px;
      background: skyblue;
      border-radius: 12px; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='1']:before {
      margin-left: 0%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='1']:before {
      width: 4.16667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='2']:before {
      margin-left: 4.16667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='2']:before {
      width: 8.33333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='3']:before {
      margin-left: 8.33333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='3']:before {
      width: 12.5%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='4']:before {
      margin-left: 12.5%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='4']:before {
      width: 16.66667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='5']:before {
      margin-left: 16.66667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='5']:before {
      width: 20.83333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='6']:before {
      margin-left: 20.83333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='6']:before {
      width: 25%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='7']:before {
      margin-left: 25%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='7']:before {
      width: 29.16667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='8']:before {
      margin-left: 29.16667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='8']:before {
      width: 33.33333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='9']:before {
      margin-left: 33.33333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='9']:before {
      width: 37.5%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='10']:before {
      margin-left: 37.5%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='10']:before {
      width: 41.66667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='11']:before {
      margin-left: 41.66667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='11']:before {
      width: 45.83333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='12']:before {
      margin-left: 45.83333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='12']:before {
      width: 50%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='13']:before {
      margin-left: 50%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='13']:before {
      width: 54.16667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='14']:before {
      margin-left: 54.16667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='14']:before {
      width: 58.33333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='15']:before {
      margin-left: 58.33333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='15']:before {
      width: 62.5%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='16']:before {
      margin-left: 62.5%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='16']:before {
      width: 66.66667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='17']:before {
      margin-left: 66.66667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='17']:before {
      width: 70.83333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='18']:before {
      margin-left: 70.83333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='18']:before {
      width: 75%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='19']:before {
      margin-left: 75%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='19']:before {
      width: 79.16667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='20']:before {
      margin-left: 79.16667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='20']:before {
      width: 83.33333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='21']:before {
      margin-left: 83.33333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='21']:before {
      width: 87.5%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='22']:before {
      margin-left: 87.5%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='22']:before {
      width: 91.66667%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='23']:before {
      margin-left: 91.66667%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='23']:before {
      width: 95.83333%; }
    /* line 146, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-begin='24']:before {
      margin-left: 95.83333%; }
    /* line 150, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .work-item-list .duration[data-week-nums='24']:before {
      width: 100%; }

/* line 157, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.btn-add,
.btn-download {
  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  align-items: center;
  border: none;
  background: none;
  border: 1px solid skyblue;
  color: skyblue;
  min-width: 80px;
  padding: 0 10px;
  cursor: pointer;
  font-size: 1em;
  line-height: 1.875em;
  -webkit-transition: all 0.3s false;
  -moz-transition: all 0.3s false false;
  -o-transition: all 0.3s false false;
  transition: all 0.3s; }
  /* line 173, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .btn-add:before,
  .btn-download:before {
    content: "";
    display: inline-block;
    font-size: 16px;
    margin-right: 5px; }
  /* line 180, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .btn-add:hover,
  .btn-download:hover {
    background: skyblue;
    color: #fff; }

/* line 185, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.btn-download:before {
  content: "";
  font-size: 20px; }

/* line 189, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.hide-switch {
  position: fixed;
  z-index: 50000;
  bottom: 0;
  right: 0;
  width: 0;
  height: 0;
  opacity: 0;
  border: none; }

/* line 199, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.btn-delete {
  position: absolute;
  right: 10px;
  top: 50%;
  margin-top: -11px;
  width: 22px;
  height: 22px;
  cursor: pointer;
  border: none;
  background: none;
  border-radius: 50%;
  opacity: 0;
  text-indent: -119988px;
  overflow: hidden;
  text-align: left;
  -webkit-transform: translateX(30px);
  -moz-transform: translateX(30px);
  -ms-transform: translateX(30px);
  -o-transform: translateX(30px);
  transform: translateX(30px);
  -webkit-transition: all 0.3s false;
  -moz-transition: all 0.3s false false;
  -o-transition: all 0.3s false false;
  transition: all 0.3s; }
  /* line 214, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .btn-delete:before {
    content: "";
    display: inline-block;
    font-size: 16px;
    color: #000;
    vertical-align: middle;
    text-indent: 0;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    font-size: 11px;
    line-height: 22px;
    text-align: center;
    -webkit-transition: all 0.3s false;
    -moz-transition: all 0.3s false false;
    -o-transition: all 0.3s false false;
    transition: all 0.3s; }
  /* line 232, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .btn-delete:hover {
    background: #000; }
    /* line 234, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
    .btn-delete:hover:before {
      color: #fff; }

/* line 240, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.pull-left {
  float: left; }

/* line 243, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.pull-right {
  float: right; }

/* line 246, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
.button-blk {
  padding-top: 10px; }

@media print {
  /* line 251, C:/Users/Intestine/Desktop/20week/app/public/_sass/_index.scss */
  .btn-add {
    display: none; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
